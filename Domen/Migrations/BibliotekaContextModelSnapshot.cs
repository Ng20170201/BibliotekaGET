// <auto-generated />
using System;
using Domen;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Domen.Migrations
{
    [DbContext(typeof(BibliotekaContext))]
    partial class BibliotekaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domen.Knjiga", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Kolicina")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Knjiga");
                });

            modelBuilder.Entity("Domen.Korisnik", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImeIPrezime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Passsword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipKorisnika")
                        .HasColumnType("int");

                    b.HasKey("Username");

                    b.ToTable("Korisnik");
                });

            modelBuilder.Entity("Domen.Rezervacija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatumIzdavanja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumVracanja")
                        .HasColumnType("datetime2");

                    b.Property<int>("IDKnjige")
                        .HasColumnType("int");

                    b.Property<string>("KorisnikUsername")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IDKnjige");

                    b.HasIndex("KorisnikUsername");

                    b.ToTable("Rezervacija");
                });

            modelBuilder.Entity("Domen.Zahtev", b =>
                {
                    b.Property<int>("knjigaId")
                        .HasColumnType("int");

                    b.Property<string>("usernameKorisnik")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("knjigaId", "usernameKorisnik");

                    b.HasIndex("usernameKorisnik");

                    b.ToTable("Zahtev");
                });

            modelBuilder.Entity("Domen.Rezervacija", b =>
                {
                    b.HasOne("Domen.Knjiga", "Knjiga")
                        .WithMany("Rezervacije")
                        .HasForeignKey("IDKnjige")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domen.Korisnik", "Korisnik")
                        .WithMany("Rezervacije")
                        .HasForeignKey("KorisnikUsername");
                });

            modelBuilder.Entity("Domen.Zahtev", b =>
                {
                    b.HasOne("Domen.Knjiga", "Knjiga")
                        .WithMany("Zahtevi")
                        .HasForeignKey("knjigaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domen.Korisnik", "Korisnik")
                        .WithMany("Zahtevi")
                        .HasForeignKey("usernameKorisnik")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
